        l$phi%*%l$omega31%*%d2Rdxdy + dphidx%*%l$omega31%*%dRdy +
        l$R%*%t(l$omega31)%*%d2phidxdy + dRdx%*%t(l$omega31)%*%dphidy + 
        l$phi%*%l$omega32%*%d2rdxdy + dphidx%*%l$omega32%*%drdy +
        l$r%*%t(l$omega32)%*%d2phidxdy + drdx%*%t(l$omega32)%*%dphidy

out
x
y
l$R%*%(l$omega11+t(l$omega11))%*%d2Rdxdy
d2Rdxdy
Q
l$R%*%(l$omega11+t(l$omega11))%*%d2Rdxdy
x
y
Q
l$R%*%(l$omega11+t(l$omega11))%*%d2Rdxdy
dRdx%*%(l$omega11+t(l$omega11))%*%dRdy
        l$r%*%(l$omega22+t(l$omega22))%*%d2rdxdy +
        drdx%*%(l$omega22+t(l$omega22))%*%drdy +
        l$phi%*%(l$omega23+t(l$omega23))%*%d2phidxdy +
        dphidx%*%(l$omega23+t(l$omega23))%*%dphidy +
        l$R%*%l$omega12%*%d2rdxdy + dRdx%*%l$omega12%*%drdy +
        l$r%*%t(l$omega12)%*%d2Rdxdy + drdx%*%t(l$omega12)%*%dRdy +
        l$R%*%l$omega13%*%d2phidxdy + dRdx%*%l$omega13%*%dphidy +
        l$phi%*%t(l$omega13)%*%d2Rdxdy + dphidx%*%t(l$omega13)%*%dRdy + 
        l$r%*%l$omega21%*%d2Rdxdy + drdx%*%l$omega21%*%dRdy +
        l$R%*%t(l$omega21)%*%d2rdxdy + dRdx%*%t(l$omega21)%*%drdy + 
        l$r%*%l$omega23%*%d2phidxdy + drdx%*%l$omega23%*%dphidy +
        l$phi%*%t(l$omega23)%*%d2rdxdy + dphidx%*%t(l$omega23)%*%drdy + 
        l$phi%*%l$omega31%*%d2Rdxdy + dphidx%*%l$omega31%*%dRdy +
        l$R%*%t(l$omega31)%*%d2phidxdy + dRdx%*%t(l$omega31)%*%dphidy + 
        l$phi%*%l$omega32%*%d2rdxdy + dphidx%*%l$omega32%*%drdy +
        l$r%*%t(l$omega32)%*%d2phidxdy + drdx%*%t(l$omega32)%*%dphidy

l$r%*%(l$omega22+t(l$omega22))%*%d2rdxdy
d2rdxdy
Q
q()
n
out.new
out.old
out.new
out.old
l$L
Q
out$L
Q
l$L
Q
out.new
out.old
out.new
out.old
lud
out.new
K0
Q
K0
A
B
Q
out$y
lud
lud
lud
lud
str(lud)
str(lud)
str(lud)
?zeros
fit
.ess.source('/home/pvermees/Dropbox/Programming/R/IsoplotRtest.R', visibly = FALSE, output = TRUE)
Q
q()
n
fit
ll1
ll2
tt
Q
out$
y
Y
Y
out$y
Q
Y
out$y
K0
Q
K0
plot(X,Y,type='p')
Q
fit
plot(X,Y,type='p')
out$y
out$y
ll1
ll2
plot(out$K,out$L)
Q
ll2
get.Ew_2D(w=w,Y=Y,a0=a0)
OI
E
O
solve(OI)
a0
X
a0*U*Y
D$Pb207U235
tt
K0
Q
ll
ll2
fit
ll2
out
Y - D$Pb206U238
X - D$Pb207U235
y
Q
out
Q
fit
ll2
LL.lud.UPb(ta0b0=c(255.40044146,0.05130653),x=UPb,exterr=FALSE,w=0,LL=FALSE)
LL.lud.UPb(ta0b0=c(250,0.05130653),x=UPb,exterr=FALSE,w=0,LL=FALSE)
LL.lud.UPb(ta0b0=c(260,0.05130653),x=UPb,exterr=FALSE,w=0,LL=FALSE)
LL.lud.UPb(ta0b0=c(255,0.05130653),x=UPb,exterr=FALSE,w=0,LL=FALSE)
LL.lud.UPb(ta0b0=c(255,0.05),x=UPb,exterr=FALSE,w=0,LL=FALSE)
LL.lud.UPb(ta0b0=c(255,0.06),x=UPb,exterr=FALSE,w=0,LL=FALSE)
fit
fit
fit
UPb
concordia(UPb)
fit
fit
traceback()
U*b0%*%(o12+t(o21))*dL0da0
b0
Q
U*b0*(o12+t(o21))%*%dL0da0
K0%*%(o12+t(o21))
K0
dL0da0
t(K0)%*%(o12+t(o21))
Q
.ess.source('/home/pvermees/Dropbox/Programming/R/IsoplotRtest.R', visibly = FALSE, output = TRUE)
Q
q()
n
lud
lud
fish
Q
fish
fit$hessian
solve(fit$hessian)
covmat1
covmat2
covmat1
covmat2
covmat1
covmat2
covmat1
covmat2
?concordia
traceback()
a0
Q
anchor
is.na(anchor[[2]])
a0
b0
Q
fit
traceback()
fit
covmat1
covmat2
covmat1
covmat2
?concordia
length(UPb)
?concordia
covmat1
covmat2
covmat1
covmat2
covmat1
covmat2
traceback()
d
length(nuclides)
ratio
equilibrium
nuclide
ratio
measured
expired
equilibrium
Q
equilibrium
expired
measured
equilibrium
all(equilibrium)
deficit
Q
foo <- 1
foo[TRUE]
nuclide
equilibrium
measured
expired
Q
measured
measured
d
nuclide
ratio
d[[ratio]]
measured
expired
Q
traceback()
traceback()
d
d
d$ThU$option
1/l30
d$n0['Th230']
d$ThU$option
d$ThU$x
l30
traceback()
mean(log(c(0,0)))
mean(log(c(0,1)))
mean(log(c(0,0)),na.rm=TRUE)
mean(exp(log(c(0,0)),na.rm=TRUE))
exp(mean(log(c(0,1)),na.rm=TRUE))
exp(mean(log(c(0,0)),na.rm=TRUE))
mean(log(c(0,0)),na.rm=TRUE)
q()
n
fit
fit
fit
A
B
Q
fit
fit
011
o11
o12
t(o21)
o11 - t(o21)
o12
t(o21)
Q
omega
omega
image(omega)
i1
o33
o22
o11
o23
t(o32)
o13
t(o31)
ED
ED[i1,i1]
ED[i2,i2]
ED[i3,i3]
Q
omega[i1,i1]
omega2 <- solve(ED)
omega2[i1,i1]
omega2[i2,i2]
omega[i2,i2]
ED[i1,i1]
ED[i2,i2]
ED[i3,i3]
ED[i1,i2]
ED[i2,i1]
ED[i1,i3]
ED[i3,i1]
ED[i2,i3]
ED[i3,i2]
Q
fit
traceback()
q()
n
q()
n
q()
n
traceback()
q()
n
q()
n
q()
n
q()
n
?provenance::as.compositional
?provenance::as.compositional
dat
dat <- read.csv('~/Dropbox/Programming/R/Symonds.csv',header=TRUE)
dat
subset(dat,select=c('Si','P'))
str(comp)
traceback()
texture
factor(texture)
as.integer(texture)
?texture
?texture
levels(texture)
as.factor(texture)
class(texture)
dat[,'texture']
dat[,'Texture']
config
str(config)
967/610
546/610
610/967
610/546
967/546
546/967
dat
?try
?try
traceback()
cleaned.ages
traceback()
?IsoplotR
sessionInfo()
q()
n
tt
1/x0
fit$coef
Q
traceback()
fit
Q
?solve
traceback()
fit
lud
exp(lud$par)
sqrt(diag(lud$cov))
sqrt(diag(lud$cov))*100
Q
log(0)
traceback()
init
Q
lta0b0w
x
model
Q
lta0b0w
x
x$format
Q
lud
exp(lud$par)
fit
tt
fit
a0
b0
det(fit$hessian)
Q
lud
exp(lud$par)
exp(sqrt(diag(lud$cov)))
traceback()
init
fixit(x,anchor=anchor,model=model,w=w)
LL.lud.UPb(lta0b0w=init,x=x)
LL.lud.UPb.gr(lta0b0w=init,x=x)
Q
Q
lud
exp(lud$par)
exp(sqrt(diag(lud$cov)))
exp(lud$par)
lud
q()
n
Q
q()
n
traceback()
traceback()
ab
B
fit
Q
Q
ions[j]
samp
fit
samp
samp
samp
predict_cps(samp=samp,ab=fit$ab[j,],
                             B=fit$AB[2],ion=ions[j])
Q
X
Y
Q
X
Y
Q
X
Y
ab
fit
ions[j]
samp$cps[,j]
Y
Q
samp$cps
samp$counts
samp$dwelltime
Q
ab
out
Q
fit
X
Y
Y
samp$cps
samp$counts
ions[j]
samp$cps
samp$cps[,j]
Y
ions[j]
samp$cps[,j]
Y
Q
cpsU
samp$cps[,ions[3]]
samp$cps[,ions]
cps4
cps6
cpsU
cpsUO
samp$dwelltime
Q
samp$cps[,j]
Y
samp$cps[,j]
Y
Q
theta[,ion]
sum(samp$cps[,ion])
samp$cps[,ion]
samp$cps
theta[,ion]
theta[,ion]*rowSum(samp$cps)
theta[,ion]*rowSums(samp$cps)
Q
.ess.source('/home/pvermees/Dropbox/Programming/R/simplextest.R', visibly = FALSE, output = TRUE)
sweep(theta[,ion],MARGIN=2,FUN='*',rowSums(samp$cps))
sweep(theta,MARGIN=2,FUN='*',rowSums(samp$cps))
Q
.ess.source('/home/pvermees/Dropbox/Programming/R/simplextest.R', visibly = FALSE, output = TRUE)
q()
n
.ess.source('/home/pvermees/Dropbox/Programming/R/simplextest.R', visibly = FALSE, output = TRUE)
ion
theta[,ion]
samp$cps
sweep(theta[,ion],MARGIN=2,FUN='*',rowSums(samp$cps))}
sweep(theta[,ion],MARGIN=2,FUN='*',rowSums(samp$cps))
sweep(theta[,ion],MARGIN=1,FUN='*',rowSums(samp$cps))
rowSums(samp$cps)
theta[,ion]
sweep(theta[,ion],MARGIN=1,FUN='*',rowSums(samp$cps))
sweep(theta[,ion],MARGIN=2,FUN='*',rowSums(samp$cps))
theta[,ion]
Q
.ess.source('/home/pvermees/Dropbox/Programming/R/simplextest.R', visibly = FALSE, output = TRUE)
Q
q()
n
